---
Parameters:
  BucketName: 
    Type: String
  FunctionName:
    Type: String 

Resources:

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref BucketName

  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - 's3:GetObject'
                  - 's3:ListObject'
                  - 's3-object-lambda:Get*'
                  - 's3-object-lambda:List*'
                Resource: '*'

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionName
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.10
      Handler: index.handler
      Code:
        ZipFile: |
          import json
          import logging
          import boto3
          import botocore
          from botocore.exceptions import ClientError

            #---------------Find the last file in S3 bucket-----------------#

          def get_most_recent_s3_object(bucket_name, prefix):
              global latest
              s3 = boto3.client('s3')
              paginator = s3.get_paginator( "list_objects_v2" )
              page_iterator = paginator.paginate(Bucket=bucket_name, Prefix=prefix)
              latest = None
              for page in page_iterator:
                  if "Contents" in page:
                      latest2 = max(page['Contents'], key=lambda x: x['LastModified'])
                      if latest is None or latest2['LastModified'] > latest['LastModified']:
                          latest = latest2
              return latest

          latest = get_most_recent_s3_object(bucket_name, prefix)
          latest['Key']  # -->   'prefix/objectname'


          # -----------------Generate a presigned URL for the latest S3 object-----------------#
          def create_presigned_url(bucket_name, latest, expiration=900):
            
              s3_client = boto3.client('s3',region_name="eu-east-1",config=boto3.session.Config(signature_version='s3v4'))
              try:
                  response_url = s3_client.generate_presigned_url('get_object',
                                                              Params={'Bucket': bucket_name,
                                                                      'Key': latest},
                                                              ExpiresIn=expiration)
              except Exception as e:
                  print(e)
                  logging.error(e)
                  return "Error"

              return response_url
      Tags:
        - Key: Lambda
          Value: MyLambdaFunction